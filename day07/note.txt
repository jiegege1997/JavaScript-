filter()  满足条件的元素被过滤出，组成新数组
map()  映射元素的某个内容



对象的批量创建

   1  factory  工厂模式
	     function sayName(){}
	     function createObject (name,age){
			 	return{
					name:name,
					age:age
					sayName:sayName
				}
			 }
     var o1 =  createObject('zhangsan',12);
   缺点是不分类别   方法会浪费空间
	   如果解决了方法问题  就会造成封装不完全

		2  构造函数模式(解决了分类别的问题)
		function Person(name,age){
			this.name = name;
			this.age = age;
		}
   var p1 = new Person('zhangsan',12);
	 new 关键字
	 1 创建了一个实例
	 2 构造函数内部的this指向这个实例
	 3 执行构造函数内部的代码
	 4 将实例返回
   缺点  方法浪费空间/封装不完全
	     
  3 原型模式
  function Person(){}
	Person.prototype = {
		constructor:Person,
		name:'hjj',
		age:12,
		sayName:function(){}
	};
	var p1 = new Person();
	问题    方法处理好了  实例的数据隔离做的不好
  4  构造函数模式加原型模式
   function Person(name,age){
	   this.name = name;
		 this.age = age;
		 this.friends= [];
	 }
   Person.prototype = {
	 constructor:Person,
	 sayname:function(){}
	 };

   

	 对象深入了解

	  可枚举性
		  1打印一个对象 所能看到的属性  这些属性的可枚举性 都是true
			2ss




























